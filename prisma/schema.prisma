// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Product and Inventory Models
model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  itemName    String
  category    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  variants   ProductVariant[]
  salesItems SalesItem[]
  purchases  PurchaseItem[]
  analytics  ProductAnalytics[]

  @@map("products")
}

model ProductVariant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  variantCode String
  variantSku  String
  variantName String
  unitPrice   Float
  status      String   @default("active") // active, inactive
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product    Product            @relation(fields: [productId], references: [id])
  inventory  InventoryItem[]
  salesItems SalesItem[]
  purchases  PurchaseItem[]
  analytics  ProductAnalytics[]

  @@unique([variantSku])
  @@map("product_variants")
}

model InventoryItem {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  variantId         String   @db.ObjectId
  currentStock      Int
  lowStockThreshold Int
  location          Json // { aisle: string, rack: string, bin: string }
  status            String   @default("active")
  lowStockStatus    String   @default("new") // critical, new, ignored, inactive
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  variant   ProductVariant      @relation(fields: [variantId], references: [id])
  movements InventoryMovement[]

  @@map("inventory_items")
}

model InventoryMovement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  inventoryId String   @db.ObjectId
  type        String // sale, purchase, transfer, adjustment
  quantity    Int
  reason      String?
  referenceId String? // Reference to sales/purchase transaction
  createdAt   DateTime @default(now())

  // Relations
  inventory InventoryItem @relation(fields: [inventoryId], references: [id])

  @@map("inventory_movements")
}

// Sales Models
model Sales {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId    String?  @db.ObjectId
  totalAmount   Float
  paymentMethod String // cash, card, bank_transfer
  status        String   @default("completed") // pending, completed, cancelled
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  customer Customer?   @relation(fields: [customerId], references: [id])
  items    SalesItem[]

  @@map("sales")
}

model SalesItem {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  salesId    String @db.ObjectId
  productId  String @db.ObjectId
  variantId  String @db.ObjectId
  quantity   Int
  unitPrice  Float
  totalPrice Float

  // Relations
  sales   Sales          @relation(fields: [salesId], references: [id])
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@map("sales_items")
}

// Purchase Models
model Purchase {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  supplierId  String?  @db.ObjectId
  totalAmount Float
  status      String   @default("completed") // pending, completed, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  supplier Supplier?      @relation(fields: [supplierId], references: [id])
  items    PurchaseItem[]

  @@map("purchases")
}

model PurchaseItem {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  purchaseId String @db.ObjectId
  productId  String @db.ObjectId
  variantId  String @db.ObjectId
  quantity   Int
  unitPrice  Float
  totalPrice Float

  // Relations
  purchase Purchase       @relation(fields: [purchaseId], references: [id])
  product  Product        @relation(fields: [productId], references: [id])
  variant  ProductVariant @relation(fields: [variantId], references: [id])

  @@map("purchase_items")
}

// Expense Models
model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  category    String // rent, utilities, salaries, marketing, etc.
  amount      Float
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expenses")
}

// Customer Models
model Customer {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String?
  phone            String?
  address          String?
  totalSpent       Float    @default(0)
  transactionCount Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  sales     Sales[]
  analytics CustomerAnalytics[]

  @@map("customers")
}

// Supplier Models
model Supplier {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  purchases Purchase[]

  @@map("suppliers")
}

// Financial Models
model FinancialPosition {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  receivables  Float    @default(0)
  payables     Float    @default(0)
  netPosition  Float    @default(0)
  grossProfit  Float    @default(0)
  netProfit    Float    @default(0)
  profitMargin Float    @default(0)
  expenseRatio Float    @default(0)
  date         DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("financial_positions")
}

// Analytics Models for Dashboard Data
model DailyAnalytics {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime
  totalSales     Float    @default(0)
  salesCount     Int      @default(0)
  totalPurchases Float    @default(0)
  purchaseCount  Int      @default(0)
  totalExpenses  Float    @default(0)
  expenseCount   Int      @default(0)
  grossProfit    Float    @default(0)
  netProfit      Float    @default(0)
  profitMargin   Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([date])
  @@map("daily_analytics")
}

model ProductAnalytics {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  productId     String   @db.ObjectId
  variantId     String   @db.ObjectId
  date          DateTime
  totalQuantity Int      @default(0)
  totalRevenue  Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@unique([productId, variantId, date])
  @@map("product_analytics")
}

model CategoryAnalytics {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  category   String
  date       DateTime
  totalSales Float    @default(0)
  count      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([category, date])
  @@map("category_analytics")
}

model CustomerAnalytics {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId       String   @db.ObjectId
  date             DateTime
  totalSpent       Float    @default(0)
  transactionCount Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id])

  @@unique([customerId, date])
  @@map("customer_analytics")
}

model PaymentAnalytics {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  method      String // cash, card, bank_transfer
  date        DateTime
  totalAmount Float    @default(0)
  count       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([method, date])
  @@map("payment_analytics")
}
